/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface VaultInterface extends utils.Interface {
  functions: {
    "LENGTH()": FunctionFragment;
    "auctionEnd()": FunctionFragment;
    "auctionState()": FunctionFragment;
    "bid()": FunctionFragment;
    "cash()": FunctionFragment;
    "curator()": FunctionFragment;
    "end()": FunctionFragment;
    "fractions()": FunctionFragment;
    "fractionsID()": FunctionFragment;
    "id()": FunctionFragment;
    "isLivePrice(uint256)": FunctionFragment;
    "livePrice()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "onTransfer(address,address,uint256)": FunctionFragment;
    "priceToCount(uint256)": FunctionFragment;
    "redeem()": FunctionFragment;
    "reservePrice()": FunctionFragment;
    "settings()": FunctionFragment;
    "start()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "token()": FunctionFragment;
    "underlying()": FunctionFragment;
    "underlyingID()": FunctionFragment;
    "updateUserPrice(uint256)": FunctionFragment;
    "userPrices(address)": FunctionFragment;
    "version()": FunctionFragment;
    "weth()": FunctionFragment;
    "winning()": FunctionFragment;
    "withdrawERC1155(address,uint256,uint256)": FunctionFragment;
    "withdrawERC20(address)": FunctionFragment;
    "withdrawERC721(address,uint256)": FunctionFragment;
    "withdrawETH()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "LENGTH"
      | "auctionEnd"
      | "auctionState"
      | "bid"
      | "cash"
      | "curator"
      | "end"
      | "fractions"
      | "fractionsID"
      | "id"
      | "isLivePrice"
      | "livePrice"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "onTransfer"
      | "priceToCount"
      | "redeem"
      | "reservePrice"
      | "settings"
      | "start"
      | "supportsInterface"
      | "token"
      | "underlying"
      | "underlyingID"
      | "updateUserPrice"
      | "userPrices"
      | "version"
      | "weth"
      | "winning"
      | "withdrawERC1155"
      | "withdrawERC20"
      | "withdrawERC721"
      | "withdrawETH"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "LENGTH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "auctionEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bid", values?: undefined): string;
  encodeFunctionData(functionFragment: "cash", values?: undefined): string;
  encodeFunctionData(functionFragment: "curator", values?: undefined): string;
  encodeFunctionData(functionFragment: "end", values?: undefined): string;
  encodeFunctionData(functionFragment: "fractions", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fractionsID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "id", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isLivePrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "livePrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "priceToCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "redeem", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "reservePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "settings", values?: undefined): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "underlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateUserPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userPrices",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(functionFragment: "winning", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawERC1155",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC721",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "LENGTH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auctionEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "curator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "end", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fractions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fractionsID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLivePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "livePrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "onTransfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceToCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reservePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settings", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "underlying", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUserPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userPrices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winning", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;

  events: {
    "Bid(address,uint256)": EventFragment;
    "Cash(address,uint256)": EventFragment;
    "PriceUpdate(address,uint256)": EventFragment;
    "Redeem(address)": EventFragment;
    "Start(address,uint256)": EventFragment;
    "WithdrawERC1155(address,uint256,uint256,address)": EventFragment;
    "WithdrawERC20(address,address)": EventFragment;
    "WithdrawERC721(address,uint256,address)": EventFragment;
    "WithdrawETH(address)": EventFragment;
    "Won(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Start"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawERC1155"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawERC721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Won"): EventFragment;
}

export interface BidEventObject {
  buyer: string;
  price: BigNumber;
}
export type BidEvent = TypedEvent<[string, BigNumber], BidEventObject>;

export type BidEventFilter = TypedEventFilter<BidEvent>;

export interface CashEventObject {
  owner: string;
  shares: BigNumber;
}
export type CashEvent = TypedEvent<[string, BigNumber], CashEventObject>;

export type CashEventFilter = TypedEventFilter<CashEvent>;

export interface PriceUpdateEventObject {
  user: string;
  price: BigNumber;
}
export type PriceUpdateEvent = TypedEvent<
  [string, BigNumber],
  PriceUpdateEventObject
>;

export type PriceUpdateEventFilter = TypedEventFilter<PriceUpdateEvent>;

export interface RedeemEventObject {
  redeemer: string;
}
export type RedeemEvent = TypedEvent<[string], RedeemEventObject>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface StartEventObject {
  buyer: string;
  price: BigNumber;
}
export type StartEvent = TypedEvent<[string, BigNumber], StartEventObject>;

export type StartEventFilter = TypedEventFilter<StartEvent>;

export interface WithdrawERC1155EventObject {
  token: string;
  tokenId: BigNumber;
  amount: BigNumber;
  to: string;
}
export type WithdrawERC1155Event = TypedEvent<
  [string, BigNumber, BigNumber, string],
  WithdrawERC1155EventObject
>;

export type WithdrawERC1155EventFilter = TypedEventFilter<WithdrawERC1155Event>;

export interface WithdrawERC20EventObject {
  token: string;
  to: string;
}
export type WithdrawERC20Event = TypedEvent<
  [string, string],
  WithdrawERC20EventObject
>;

export type WithdrawERC20EventFilter = TypedEventFilter<WithdrawERC20Event>;

export interface WithdrawERC721EventObject {
  token: string;
  tokenId: BigNumber;
  to: string;
}
export type WithdrawERC721Event = TypedEvent<
  [string, BigNumber, string],
  WithdrawERC721EventObject
>;

export type WithdrawERC721EventFilter = TypedEventFilter<WithdrawERC721Event>;

export interface WithdrawETHEventObject {
  to: string;
}
export type WithdrawETHEvent = TypedEvent<[string], WithdrawETHEventObject>;

export type WithdrawETHEventFilter = TypedEventFilter<WithdrawETHEvent>;

export interface WonEventObject {
  buyer: string;
  price: BigNumber;
}
export type WonEvent = TypedEvent<[string, BigNumber], WonEventObject>;

export type WonEventFilter = TypedEventFilter<WonEvent>;

export interface Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LENGTH(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctionEnd(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctionState(overrides?: CallOverrides): Promise<[number]>;

    bid(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cash(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    curator(overrides?: CallOverrides): Promise<[string]>;

    end(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fractions(overrides?: CallOverrides): Promise<[string]>;

    fractionsID(overrides?: CallOverrides): Promise<[BigNumber]>;

    id(overrides?: CallOverrides): Promise<[BigNumber]>;

    isLivePrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    livePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onTransfer(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    priceToCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    redeem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reservePrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { voting: BigNumber; reserve: BigNumber }
    >;

    settings(overrides?: CallOverrides): Promise<[string]>;

    start(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    underlying(overrides?: CallOverrides): Promise<[string]>;

    underlyingID(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateUserPrice(
      _new: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    version(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    winning(overrides?: CallOverrides): Promise<[string]>;

    withdrawERC1155(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawERC721(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

  auctionEnd(overrides?: CallOverrides): Promise<BigNumber>;

  auctionState(overrides?: CallOverrides): Promise<number>;

  bid(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cash(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  curator(overrides?: CallOverrides): Promise<string>;

  end(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fractions(overrides?: CallOverrides): Promise<string>;

  fractionsID(overrides?: CallOverrides): Promise<BigNumber>;

  id(overrides?: CallOverrides): Promise<BigNumber>;

  isLivePrice(
    _price: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  livePrice(overrides?: CallOverrides): Promise<BigNumber>;

  onERC1155BatchReceived(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onTransfer(
    _from: PromiseOrValue<string>,
    _to: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  priceToCount(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeem(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reservePrice(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { voting: BigNumber; reserve: BigNumber }
  >;

  settings(overrides?: CallOverrides): Promise<string>;

  start(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  token(overrides?: CallOverrides): Promise<string>;

  underlying(overrides?: CallOverrides): Promise<string>;

  underlyingID(overrides?: CallOverrides): Promise<BigNumber>;

  updateUserPrice(
    _new: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userPrices(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  winning(overrides?: CallOverrides): Promise<string>;

  withdrawERC1155(
    _token: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawERC721(
    _token: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawETH(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    auctionEnd(overrides?: CallOverrides): Promise<BigNumber>;

    auctionState(overrides?: CallOverrides): Promise<number>;

    bid(overrides?: CallOverrides): Promise<void>;

    cash(overrides?: CallOverrides): Promise<void>;

    curator(overrides?: CallOverrides): Promise<string>;

    end(overrides?: CallOverrides): Promise<void>;

    fractions(overrides?: CallOverrides): Promise<string>;

    fractionsID(overrides?: CallOverrides): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    isLivePrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    livePrice(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onTransfer(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    priceToCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(overrides?: CallOverrides): Promise<void>;

    reservePrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { voting: BigNumber; reserve: BigNumber }
    >;

    settings(overrides?: CallOverrides): Promise<string>;

    start(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    token(overrides?: CallOverrides): Promise<string>;

    underlying(overrides?: CallOverrides): Promise<string>;

    underlyingID(overrides?: CallOverrides): Promise<BigNumber>;

    updateUserPrice(
      _new: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    winning(overrides?: CallOverrides): Promise<string>;

    withdrawERC1155(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC721(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawETH(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Bid(address,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      price?: null
    ): BidEventFilter;
    Bid(buyer?: PromiseOrValue<string> | null, price?: null): BidEventFilter;

    "Cash(address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      shares?: null
    ): CashEventFilter;
    Cash(owner?: PromiseOrValue<string> | null, shares?: null): CashEventFilter;

    "PriceUpdate(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      price?: null
    ): PriceUpdateEventFilter;
    PriceUpdate(
      user?: PromiseOrValue<string> | null,
      price?: null
    ): PriceUpdateEventFilter;

    "Redeem(address)"(
      redeemer?: PromiseOrValue<string> | null
    ): RedeemEventFilter;
    Redeem(redeemer?: PromiseOrValue<string> | null): RedeemEventFilter;

    "Start(address,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      price?: null
    ): StartEventFilter;
    Start(
      buyer?: PromiseOrValue<string> | null,
      price?: null
    ): StartEventFilter;

    "WithdrawERC1155(address,uint256,uint256,address)"(
      token?: PromiseOrValue<string> | null,
      tokenId?: null,
      amount?: null,
      to?: PromiseOrValue<string> | null
    ): WithdrawERC1155EventFilter;
    WithdrawERC1155(
      token?: PromiseOrValue<string> | null,
      tokenId?: null,
      amount?: null,
      to?: PromiseOrValue<string> | null
    ): WithdrawERC1155EventFilter;

    "WithdrawERC20(address,address)"(
      token?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): WithdrawERC20EventFilter;
    WithdrawERC20(
      token?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null
    ): WithdrawERC20EventFilter;

    "WithdrawERC721(address,uint256,address)"(
      token?: PromiseOrValue<string> | null,
      tokenId?: null,
      to?: PromiseOrValue<string> | null
    ): WithdrawERC721EventFilter;
    WithdrawERC721(
      token?: PromiseOrValue<string> | null,
      tokenId?: null,
      to?: PromiseOrValue<string> | null
    ): WithdrawERC721EventFilter;

    "WithdrawETH(address)"(
      to?: PromiseOrValue<string> | null
    ): WithdrawETHEventFilter;
    WithdrawETH(to?: PromiseOrValue<string> | null): WithdrawETHEventFilter;

    "Won(address,uint256)"(
      buyer?: PromiseOrValue<string> | null,
      price?: null
    ): WonEventFilter;
    Won(buyer?: PromiseOrValue<string> | null, price?: null): WonEventFilter;
  };

  estimateGas: {
    LENGTH(overrides?: CallOverrides): Promise<BigNumber>;

    auctionEnd(overrides?: CallOverrides): Promise<BigNumber>;

    auctionState(overrides?: CallOverrides): Promise<BigNumber>;

    bid(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cash(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    curator(overrides?: CallOverrides): Promise<BigNumber>;

    end(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fractions(overrides?: CallOverrides): Promise<BigNumber>;

    fractionsID(overrides?: CallOverrides): Promise<BigNumber>;

    id(overrides?: CallOverrides): Promise<BigNumber>;

    isLivePrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    livePrice(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onTransfer(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    priceToCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reservePrice(overrides?: CallOverrides): Promise<BigNumber>;

    settings(overrides?: CallOverrides): Promise<BigNumber>;

    start(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    underlying(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingID(overrides?: CallOverrides): Promise<BigNumber>;

    updateUserPrice(
      _new: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    winning(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawERC1155(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawERC721(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LENGTH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bid(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cash(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    curator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    end(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fractions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fractionsID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    id(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLivePrice(
      _price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    livePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onTransfer(
      _from: PromiseOrValue<string>,
      _to: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    priceToCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reservePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    settings(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlying(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateUserPrice(
      _new: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userPrices(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    winning(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawERC1155(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC721(
      _token: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
